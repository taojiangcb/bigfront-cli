#!/usr/bin/env node

const fs = require('fs');
const program = require("commander");
const inquirer = require('inquirer');
const { exec, execAsync } = require('./exec');

const { gitDownLoader } = require('./gitdown');
const shell = require('shelljs');

program.usage('[cmd] <options>')
  .arguments('<cmd> [env]')
  .action(function (cmd, params) {
    const handler = bindHandler[cmd];
    typeof handler !== 'undefined' && handler(params);
  })

const bindHandler = {
  create_koa_inversify(params) {
    const _pwd_dir = shell.pwd().stdout;//输出用户当前所在位置
    const projectPath = `${_pwd_dir}/${params}`;
    //注意使用direct文件协议
    const tempalte = 'direct:https://github.com/taojiangcb/koa-inversify-project.git'
    let opts = { url: tempalte, path: projectPath, transtional: params };
    gitDownLoader(() => {
      shell.sed('-i', 'yd-newbook-demo', params, projectPath + '/package.json');
      shell.sed('-i', 'YD-NEW-BOOK', params, projectPath + '/.vscode/launch.json');
      exec(`cd ${projectPath}`);
      exec(`npm i --registory=https://registry.npm.taobao.org`);
      console.log('download success')
    }, opts)
  },

  /**创建一个spa */
  create_react_spa(params) {
    const _pwd_dir = shell.pwd().stdout;//输出用户当前所在位置
    const projectPath = `${_pwd_dir}/${params}`;
    const tempalte = 'direct:https://github.com/taojiangcb/react_sap_temp.git'
    let opts = { url: tempalte, path: projectPath, transtional: params };
    gitDownLoader(() => {
      shell.sed('-i', 'react_sap_temp', params, projectPath + '/package.json');
      shell.sed('-i', 'react_sap_temp', params, projectPath + '/.vscode/launch.json');
      console.log('download success');
      exec(`cd ${projectPath}`);
      try {
        execAsync(`sudo npm i --registory=https://registry.npm.taobao.org`)
          .then(() => {
            console.log('project init complete');
          })
          .catch((reason) => {
            shell.exec(`rm -fr ${projectPath}`);
          })
      }
      catch (e) {
        console.error(e);
        shell.exec(`rm -fr ${projectPath}`);
      }
    }, opts)
  }
}

//水印
const figlet = require('figlet');//默认生成过程为异步
const versionStr = figlet.textSync('BIG-FRONT-CLI');//修改为同步
console.log(versionStr);

//读取 package的version
let _version = require('./../package.json').version;
program.version(_version);
program.parse(process.argv);